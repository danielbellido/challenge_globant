from fastapi import FastAPI, HTTPException
import mysql.connector

app = FastAPI()

# Configuración de conexión a MySQL
db_config = {
    "host": "globant-db.chowq0ua2ted.us-east-2.rds.amazonaws.com",
    "user": "admin",
    "password": "mUmusa91_",
    "database": "globant_challenge",
}

# Función para obtener una conexión a la base de datos
def get_db_connection():
    return mysql.connector.connect(**db_config)


# 📌 Endpoint 1: Cantidad de empleados contratados por mes/año (2021)
@app.get("/hired_employees/by_month/")
def get_hired_employees_by_month():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        query = """
        SELECT 
            d.department, 
            j.job, 
            MONTH(he.datetime) AS month, 
            COUNT(he.id) AS hired_count
        FROM hired_employees he
        JOIN departments d ON he.department_id = d.id
        JOIN jobs j ON he.job_id = j.id
        WHERE YEAR(he.datetime) = 2021
        GROUP BY d.department, j.job, month
        ORDER BY d.department, j.job, month;
        """
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# 📌 Endpoint 2: Departamentos con contrataciones menores al promedio
@app.get("/departments/below_average/")
def get_departments_below_average():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        query = """
        SELECT 
            d.id, 
            d.department, 
            COUNT(he.id) AS hired_count
        FROM hired_employees he
        JOIN departments d ON he.department_id = d.id
        WHERE YEAR(he.datetime) = 2021
        GROUP BY d.id, d.department
        HAVING COUNT(he.id) < (
            SELECT AVG(hired_count) 
            FROM (
                SELECT COUNT(id) AS hired_count 
                FROM hired_employees 
                WHERE YEAR(datetime) = 2021 
                GROUP BY department_id
            ) AS avg_hired
        )
        ORDER BY hired_count ASC;
        """
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# 📌 Endpoint 3: Total de empleados contratados por departamento
@app.get("/departments/total_hired/")
def get_total_hired_by_department():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        query = """
        SELECT 
            d.department, 
            COUNT(he.id) AS total_hired
        FROM hired_employees he
        JOIN departments d ON he.department_id = d.id
        GROUP BY d.department
        ORDER BY total_hired DESC;
        """
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
